Explicación clases GeneradorSudoku y ResolvedorSudoku:

Antes que nada, la clase GeneradorSudoku no tiene casos de prueba porque genera un sudoku aleatorio. De todas maneras, en el driver luego te deja resolver el sudoku con alguno de los algoritmos de ResolvedorSudoku, para comprobar su correcto funcionamiento.

Explicación de los algoritmos de ResolvedorSudoku:

El algoritmo número 1 simplemente hace un backtracking normal: empieza por la primera fila y columna, y va recorriendo el sudoku. El algoritmo número 2 usa el mismo backtracking, pero antes resuelve todas las casillas que tienen solo una posibilidad. Adicionalmente, si encuentra que hay alguna casilla que haciendo esto queda sin solución, evita la ejecución del backtracking, ya que el sudoku será irresoluble. El algoritmo número 3, además de hacer la misma optimización que el algoritmo número 2, mira qué casillas tienen menos posibilidades, para recorrerlas primero en el backtracking, y así reducir el tamaño del árbol de recursividad que se recorre. Además, tiene un límite de iteraciones del backtracking, que se añadió para hacer que el algoritmo de generación de sudokus no se quedase parado mucho tiempo.

Explicación de los algoritmos de GeneradorSudoku:

Esta clase tiene en total 4 algoritmos: 2 de prueba y 2 definitivos. El primer algoritmo de prueba empieza con un tablero vacío y mientras tenga solución múltiple, va añadiendo valores aleatorios a casillas vacías que no incumplan las condiciones de fila, columna y región. Si en alguna de estas iteraciones queda un sudoku irresoluble, se revierte el cambio. El segundo algoritmo de prueba era en principio una mejora para tener que generar menos números aleatorios: Si el número aleatorio n que generaba no valía, probaba n+1, y si no funcionaba, n+2, y así hasta encontrar un número que sí valiese. Sin embargo, resultan con este algoritmo sudokus con excesiva concentración de números en algunos lugares, lo que hacía que simplemente para generar un sudoku de solución única necesitase rellenar la mitad del tablero o incluso más.
Respecto al primer algoritmo definitivo, es una mejora del primer algoritmo de prueba que llama menos veces al resolvedor de sudokus. Una vez llegados a un tablero de solución única, si se le ha pedido un sudoku difícil, lo devuelve directamente, y si es de dificultad fácil o media, va rellenando casillas hasta alcanzar una cuota que depende del número de casillas totales y la dificultad pedida.
El segundo algoritmo definitivo no va poniendo valores aleatorios hasta que haya solución única, sino que lo hace hasta que tiene un 20% del tablero relleno. Entonces, selecciona una de las soluciones posibles, y va rellenando números con ese sudoku. Nada más llegue a solución única devuelve un sudoku difícil y, de manera análoga al algoritmo anterior, si se le pide uno fácil o medio rellena más casillas. Es mucho más rápido que el algoritmo anterior, pero los sudokus que genera salen más "regulares", por decirlo de cierta manera: hay muchas secuencias de números consecutivos. Recomendamos el uso de este algoritmo para generar sudokus de 16x16, ya que es el único que lo hace en un tiempo razonable, y para sudokus de 4x4 y 9x9 recomendamos el algoritmo anterior.
